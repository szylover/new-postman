# 需求说明：Postman 替代软件

### 1. 背景与目标

* **背景**：当前 API 调试和测试领域，Postman 占据主导地位，但在性能、协议支持和可视化定制化方面仍有改进空间。
* **目标**：开发一款跨平台、高性能、可扩展的 API 调试工具，支持多种通信协议、深度解析报文、并提供灵活的 JSON 可视化能力。

### 2. 范围

* 支持常见及前沿网络协议
* 深度解析协议报文并展示结构化信息
* 丰富的 JSON 可视化视图
* 基础调试自动化与脚本能力
* 插件化架构，便于后续扩展

### 3. 功能需求

#### 3.1 协议支持

* **HTTP 系列**：HTTP/1.0, HTTP/1.1, HTTP/2, HTTP/3 (QUIC)
* **传输层**：TCP, UDP
* **Web 相关**：WebSocket, SSE
* **RPC 框架**：gRPC, Thrift
* **消息队列**：MQTT, AMQP
* **邮件协议**：SMTP, POP3, IMAP
* **文件传输**：FTP, SFTP
* **图形接口**：GraphQL, SOAP
* **低功耗物联网**：CoAP
* **原始连接**：Raw TCP, Raw UDP

#### 3.2 请求构建与发送

* 定制 URL、Header、Query、Body、Form、Multipart
* 支持文件上传/下载
* 环境变量、全局变量与集合变量替换
* 请求历史与缓存控制

#### 3.3 报文解析

* **请求/响应报文分段解析**：分离并展示协议层次（协议头、传输头、应用头）
* **二进制/文本自动识别**：对于非文本类型，如 Protobuf、Thrift，能加载对应 schema 解析
* **抓包导入**：支持 pcap、HAR、Wireshark 输出文件导入并解析

#### 3.4 JSON 解析及可视化

* **树状视图**：可折叠/展开节点
* **表格视图**：数组与对象扁平化表格展示
* **图表视图**：自动识别数值数组并生成折线图/柱状图
* **路径搜索**：根据 JSONPath/JsonPointer 快速定位
* **Schema 验证**：基于 JSON Schema 验证并标记错误

#### 3.5 集合与环境管理

* **集合管理**：分组、排序、标签、依赖关系
* **环境管理**：多环境变量、加密存储、导入/导出
* **共享与协作**：团队云同步、权限控制

#### 3.6 脚本与自动化测试

* **前置/后置脚本**：支持 JavaScript/Python
* **断言库**：状态码、响应时间、字段值、Schema
* **测试报告**：HTML/Markdown 导出
* **CI 集成**：命令行运行、Jenkins/GitLab CI 支持

#### 3.7 认证与安全

* **常见认证支持**：Basic Auth, OAuth 1.0/2.0, API Key, JWT
* **证书管理**：自签、CA 证书导入
* **加密存储**：敏感信息本地加密

#### 3.8 插件/扩展

* **插件市场**：社区插件安装、卸载
* **SDK 支持**：提供 Node.js/Java/Python 插件开发 SDK
* **脚本扩展**：自定义面板与可视化组件

### 4. 非功能需求

* **性能**：发送并发请求至少 1000 QPS，页面渲染不超过 200ms
* **跨平台**：Windows、macOS、Linux、Web（Electron/Native）
* **可用性**：简洁直观的 UI，响应式布局
* **可扩展性**：模块化架构，插件热加载
* **安全性**：本地数据加密、最小权限原则

### 5. 技术方案

仅采用以下轻量级技术栈：

* **Tauri**：基于 Rust 与系统 WebView，应用体积小（约 3–5 MB）、启动迅速、资源占用低，支持 Windows/macOS/Linux。
* **Neutralino (natd)**：轻量级桌面运行时，利用系统 WebView 提供最小依赖和快速打包能力，与 Tauri 配合减小整体包体。
* **Fluent UI**：Microsoft 出品的 React 组件库，提供现代化、一致的设计系统，用于构建可访问的高质量界面和 JSON 可视化组件。

**集成方案**：

1. 在 Tauri Rust 后端实现协议解析与文件系统交互；
2. 通过 Neutralino 打包前端资源并作为运行时环境；
3. 前端使用 React + Fluent UI 构建请求构造器、报文解析面板及 JSON 可视化视图。

### 6. UX/UI 关键需求. UX/UI 关键需求 UX/UI 关键需求

* **报文解析面板**：层次化树状结构
* **JSON 可视化**：可切换多种视图
* **代码生成面板**：支持多语言一键复制
* **黑/白主题**：可自动切换或手动切换

### 7. 其他需求

* 日志与诊断：操作日志、错误报告
* 本地化：多语言支持（中英）
* 无障碍：键盘导航、屏幕阅读器支持

---

*文档版本：v0.1*
